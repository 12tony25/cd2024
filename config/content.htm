<h1>About</h1>
<p>網頁:<a class="Link--inTextBlock" href="https://12tony25.github.io/cd2024/">https://12tony25.github.io/cd2024/</a></p>
<p>網誌:<a href="https://12tony25.github.io/cd2024/blog">https://12tony25.github.io/cd2024/blog</a></p>
<p>簡報:<a href="https://12tony25.github.io/cd2024/reveal">https://12tony25.github.io/cd2024/reveal</a></p>
<p>倉儲:<a href="https://github.com/12tony25/cd2024.git">https://github.com/12tony25/cd2024.git</a></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小..</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h1 style="width: 100%; height: 100%;">翻譯.</h1>
<div id="brython_div2"><a href="https://drive.google.com/file/d/1Lbt5pvrByu2dFweOda84GZLcXS1PjxgV/view?usp=drive_link">https://drive.google.com/file/d/1Lbt5pvrByu2dFweOda84GZLcXS1PjxgV/view?usp=drive_link</a></div>
<h1>影片連結.</h1>
<div><a href="https://drive.google.com/file/d/1sZrPHx13sINiFwkIQI15R9GvXPp4r5It/view?usp=drive_link"><span>cd2024 2b w4 如何上傳 LaTeX 範例檔案並利用 Actions 在線上編譯出 pdf 12 (1).mp4</span>https://drive.google.com/file/d/1sZrPHx13sINiFwkIQI15R9GvXPp4r5It/view?usp=drive_link</a></div>
<div><a href="https://drive.google.com/file/d/1Cl8OQjroQYqbNHq9d_-SxpR7WLByFUxD/view?usp=drive_link"><span>cd2024 2b w4 以第六組為例, 利用 Codespaces 改版 11 (1).mp4</span>https://drive.google.com/file/d/1Cl8OQjroQYqbNHq9d_-SxpR7WLByFUxD/view?usp=drive_link</a></div>
<h1>期中影片</h1>
<p>https://drive.google.com/file/d/1hTZFKj8tgyO5NFEMI8-zZHVzwDXer-_T/view?usp=drive_link</p>
<p>=======</p>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<h1 id="brython_div2">翻譯論文</h1>
<p>https://drive.google.com/file/d/1Lbt5pvrByu2dFweOda84GZLcXS1PjxgV/view?usp=drive_link</p>
<p>\documentclass[12pt,a4paper]{report} %紙張設定<br/>\usepackage{xeCJK}%中文字體模組<br/>\setCJKmainfont{TW-Kai} %設定中文字體<br/>\usepackage[]{graphicx}<br/>\begin{document}</p>
<p>\includegraphics[width=12cm]{22/1.png}<br/>\begin{center}<br/>Figure 49 Overview of the products after manufacturing</p>
<p>圖49 產品製造後概覽<br/>\end{center}<br/>This give us the opportunity to use ECOs for their actual purpose, stablish and control a<br/>change to the product item. The changes to be carried out were on the CAD file regarding<br/>the product item. As before we can start the ECO and fill in the description, then the files are<br/>uploaded, and the ECO (Figure 50) goes through necessary validation before been made<br/>effective.\\<br/>這使我們有機會將 ECO 用於其實際目的，建立和控制<br/>更改為產品項。要執行的更改在 CAD 檔上，涉及<br/>產品項。和以前一樣，我們可以啟動 ECO 並填寫描述，然後檔是<br/>上傳，ECO （圖 50） 在進行之前經過必要的驗證<br/>有效。\\ <br/>\includegraphics[width=12cm]{22/2.png}<br/>\begin{center}<br/> Figure 50 Depiction of the validation of the ECO<br/> <br/> 圖 50 ECO 驗證說明<br/>\end{center}</p>
<p>\begin{center}<br/>The validation procedure basically is set to ask for validation of someone with proper<br/>access permissions or specific personnel. In this case, the master account was used to validate<br/>and make effective as can be seen from the log in the right side of the image. Once the change<br/> <br/>驗證程式基本上是設置為要求對某人進行適當的驗證<br/>存取權限或特定人員。在本例中，主帳戶用於驗證<br/>並使其有效，從圖像右側的日誌中可以看出。一旦改變</p>
<p>\newpage<br/>is applied you can see that the product item version has been iterated to version 2 as well as<br/>a new ECO has been added to the list of ECOs linked to the item (Figure 51).</p>
<p>應用後，您可以看到產品項版本已反覆運算到版本 2 以及<br/>與該專案連結的 ECO 清單中添加了一個新的 ECO（圖 51）。</p>
<p><br/>\includegraphics[width=12cm]{22/3.png}<br/>\end{center}\\<br/>\begin{center}<br/> Figure 51 Depiction of changes provoked by the ECO to product item<br/> <br/> 圖 51 ECO 對產品專案引起的變化的描述 <br/> <br/>\end{center}<br/>\begin{center}<br/>That update is followed by another batch of prototypes, the cycle would continue until<br/>the prototypes produced satisfy the criteria stablished by the design team. In the case of this<br/>simulation it was assumed that one correction was representative enough of this process. This<br/>finalizes the development from idea to prototype.<br/> <br/>該更新之後是另一批原型，該週期將持續到<br/>生產的原型符合設計團隊制定的標準。在這種情況下<br/>模擬 假設一個修正足以代表這個過程。這<br/>完成從想法到原型的開發。<br/>\end{center}\\<br/>\begin{center}<br/>5.4.2. Process Plan - Production Test Run - Production</p>
<p>5.4.2. 工藝計畫-生產試運行-生產 <br/>\end{center}<br/>\begin{center}<br/>Now that the prototype phase is complete the focus will shift to the process. As stablished<br/>before, it was decided to separate the prototype products from the final product item to isolate<br/>the product from the production process during the development. This way many aspects of<br/>development of the product could be evaluated in an ordered manner. Now that the process<br/>is been developed it seems reasonable to create the product items that will represent the final<br/>products since the product of a successful run of the process will be the production ready<br/>samples of it (Figure 52).</p>
<p>現在原型階段已經完成，重點將轉移到流程上。已確定<br/>以前，決定將原型產品與最終產品專案分開進行隔離<br/>產品從生產過程中的開發過程開始。這樣一來，很多方面<br/>產品的開發可以有序地進行評估。現在，該過程<br/>被開發出來，創建將代表最終的產品專案似乎是合理的<br/>產品由於產品成功運行的過程將準備好生產<br/>它的樣本（圖52）。<br/>\newpage<br/>\includegraphics[width=12cm]{22/4.png}<br/>\end{center}<br/>\begin{center}<br/>Figure 52 Sectioned diagram regarding Process development</p>
<p>圖 52 工藝開發剖面圖\\<br/>Other product items that created were the raw materials for the injection molding (which<br/>are plastic pellets that are fed into the machine to be melted and injected). All that was done<br/>in identical manner to when we create the prototype products with the exception that the<br/>Alpha case (Figure 53) now is marked as sellable and its sale costs are now relevant (Figure<br/>54).<br/> <br/>創造的其他產品專案是注塑成型的原材料（其中<br/>是送入機器進行熔化和注射的塑膠顆粒）。所有這一切都完成了<br/>以與我們創建原型產品時相同的方式，除了<br/>Alpha 案例（圖 53）現在被標記為可售，其銷售成本現在相關（圖<br/>54).</p>
<p>\includegraphics[width=12cm]{22/5.png}<br/>\end{center}\\<br/>\begin{center}<br/>Figure 53 Render of how the final product should look like</p>
<p>圖 53 最終產品外觀的渲染圖<br/>\includegraphics[width=12cm]{22/6.png}<br/>\end{center}\\<br/>\begin{center}<br/>Figure 54 Product Item of the Alpha Case</p>
<p>圖 54 Alpha 案例的產品項</p>
<p>Once the product items are taken care of, we need to go back to what aspect of the process<br/>will be tracked using Odoo in the context of this simulation. As it was hinted previously when<br/>talking about injection molding the key aspect of change regarding the process are the molds<br/>used by the machines to create the parts. For this simulation it was considered that the mold<br/>development will follow a very similar procedure of the development of the product, this<br/>should be more clear from the following diagram (Figure 55).</p>
<p><br/>一旦產品專案得到處理，我們需要回到流程的哪個方面<br/>將在此模擬的上下文中使用Odoo進行跟蹤。正如之前暗示的那樣，當<br/>談到注塑成型，工藝變化的關鍵方面是模具<br/>機器用來製造零件。對於這個模擬，認為模具<br/>開發將遵循與產品開發非常相似的程式，這<br/>從下圖（圖 55）中應該更清楚。<br/>\includegraphics[width=12cm]{22/7.png}<br/>\end{center}\\<br/>\begin{center}<br/>Figure 55 Diagram regarding process development for mold</p>
<p>圖55 模具工藝開發示意圖 <br/>\newpage<br/>\end{center}<br/>\begin{center}<br/>The production of a prototype mold by 3D printing follows the same standard procedure<br/>for prototyping used for the product. So far, the mold is considered a product like any other,<br/>this reveals another small weakness regarding Odoo ability to represent the totality of the<br/>process. The reader will notice that although the mold is been treated as a product (because<br/>it is been manufactured) it should in fact be considered a tool or piece of equipment as well.</p>
<p><br/>通過3D列印生產原型模具遵循相同的標準程式<br/>用於產品原型設計。到目前為止，模具與其他任何產品一樣被認為是一種產品，<br/>這揭示了Odoo表示整體能力的另一個小弱點<br/>過程。讀者會注意到，儘管模具被視為產品（因為<br/>它被製造出來）實際上也應該被視為一種工具或設備。<br/>\end{center}<br/>\begin{center}<br/>Although Odoo does makes this distinction between equipment and products, it has no<br/>integration regarding the situations where one is both. In addition, as explained before, there<br/>is no way of uploading CAD files to an equipment item or linking an equipment to a range<br/>of tools. I.e. Odoo does not consider a vertical drill with x number of drill bits to make<br/>different size holes. The closest it can do from the perspective of equipment/maintenance is<br/>consider the vertical drill a workstation and each drill size a separate equipment within the<br/>station with an assigned set up time. This is ok if you ignore that the drill bit is a product.</p>
<p><br/>儘管Odoo確實在設備和產品之間進行了這種區分，但它沒有<br/>關於兩者兼而有之的情況的整合。此外，如前所述，還有<br/>無法將 CAD 檔上傳到設備專案或將設備連結到範圍<br/>的工具。即 Odoo 不考慮使用具有 x 個鑽頭的立式鑽頭來製造<br/>不同尺寸的孔。從設備/維護的角度來看，它能做的最接近的是<br/>將立式鑽機視為一個工作站，每個鑽機尺寸都是一個單獨的設備。<br/>具有指定設置時間的工作站。如果您忽略鑽頭是產品，則沒關係。<br/>\end{center}<br/>\begin{center}<br/>All of this is reasonable from the perspective of an ERP system but not ideal from the<br/>perspective of PLM because it shows gaps in between items that should represent the same<br/>thing. In production from the manufacturing application what is set is the work center station<br/>not the equipment (see Figure 41). In the maintenance app there is no connection to the fact<br/>that the tool is a consumable product, you can consider a maintenance schedule and even<br/>make a useful life parameters but because it is an equipment you can’t have reserve tools<br/>like drill bits in inventory like consumables.</p>
<p></p>
<p>從ERP系統的角度來看，所有這些都是合理的，但從ERP系統的角度來看並不理想。<br/>PLM 的視角，因為它顯示了應該代表相同的項目之間的差距<br/>東西。在生產中，從製造應用程式開始，設置的是工作中心站<br/>而不是設備（見圖 41）。在維護應用程式中，與事實沒有聯繫<br/>該工具是消耗品，您可以考慮維護計畫，甚至<br/>做一個有用的壽命參數，但因為它是設備，你不能有備用工具<br/>就像庫存中的鑽頭一樣，就像消耗品一樣。<br/>\end{center}<br/>\begin{center}<br/>The result is that it becomes very difficult to represent testing with a prototype mold. If<br/>you do as the software is designed for you need to create a separate ECO to apply every<br/>operation for each different iteration of the mold development to the necessary BOMs and<br/>make a test run (Figure 56). At this point, considering the maintenance aspect of the mold as<br/>a tool just does not make sense because it would entails filing in metadata in the maintenance<br/>App by hand for every prototype mold iteration all without causing any difference from the<br/>manufacturing perspective. The PROTO mold item ends up been used only for the sake of<br/>tracking material and holding files as the mold is improved.</p>
<p><br/>結果是，用原型模具表示測試變得非常困難。如果<br/>您可以按照軟體的設計進行操作，您需要創建一個單獨的 ECO 來應用每個<br/>對模具開發的每次不同反覆運算進行操作，以達到必要的 BOM 和<br/>進行測試運行（圖 56）。在這一點上，考慮模具的維護方面為<br/>一個工具是沒有意義的，因為它需要在維護中歸檔中繼資料<br/>手動應用程式用於每個原型模具反覆運算，而不會與<br/>製造業視角。PROTO 模具項目最終僅用於<br/>隨著模具的改進，跟蹤材料並保持檔。</p>
<p>\includegraphics[width=12cm]{22/8.png}<br/>\end{center}\\<br/>\begin{center}<br/>Figure 56 ECO example of update procedure of BOM</p>
<p>圖56 BOM更新程式的ECO示例<br/>\end{center}<br/>\begin{center}<br/>Taking this in consideration, in simulation it will be produced one 3D printed mold for<br/>each part of the alpha case. Then ECOs for the prototype parts of the case will be created to<br/>be applied to the parts BOMs updating the operation from 3D printing to injection molding<br/>test run with prototype molds.</p>
<p>考慮到這一點，在模擬中，它將生產一個 3D 列印模具用於<br/>Alpha 案例的每個部分。然後，將創建案例原型部件的 ECO 以<br/>應用於零件 BOM，將操作從 3D 列印更新為注塑成型<br/>使用原型模具進行試運行。<br/>\end{center}<br/>\begin{center}<br/>At this point we could differentiate the product prototype from the test run prototype by<br/>making a new prototype product item, however considering our rapidly growing list of<br/>product items (Figure 57) it was concluded that it would be just better for depiction in this<br/>work to modify the previously produced product prototypes (made with 3D printing) and just</p>
<p><br/>在這一點上，我們可以將產品原型與測試運行原型區分開來<br/>然而，考慮到我們快速增長的清單，製作一個新的原型產品專案<br/>產品專案（圖 57）得出的結論是，最好在此進行描述<br/>努力修改以前生產的產品原型（用 3D 列印製成），然後<br/>\newpage<br/>use the same items. We can do this because those prototypes have already served their<br/>purpose.</p>
<p>只是<br/>使用相同的項目。我們可以這樣做，因為這些原型已經為他們的<br/>目的。<br/>\end{center}\\<br/>\begin{center}<br/>\includegraphics[width=12cm]{22/9.png}</p>
<p>Figure 57 Overview of product items at this stage of the simulation</p>
<p><br/>圖 57 類比此階段的產品專案概覽<br/>\end{center}<br/>\begin{center}<br/>After the mold have been created and the BOMs for the prototypes are updated to include<br/>the injection stations and the proper operations (specifying the use of the molds) the next step<br/>is to do a production test run of prototype. Again that is done by emitting the MO completing<br/>the generated WOs (see Figure 46 and Figure 47 of previous section).</p>
<p>創建模具後，原型的 BOM 將更新為 包括<br/>注塑站和正確操作（指定模具的使用）下一步<br/>就是做原型的生產試運行。同樣，這是通過發出 MO 完成來完成的<br/>生成的 WO（參見上一節的圖 46 和圖 47）。<br/>\end{center}<br/>\begin{center}<br/>The result of the production is used to check for dimension and fitting, if correction is<br/>needed the ECOs would be emitted again as seen in Figure 56, and a new iteration of<br/>production and testing would be carried out. This process would repeat until the product is<br/>satisfactory enough to justify the production of the CNC machined molds that would be used<br/>in mass production.</p>
<p>生產結果用於檢查尺寸和擬合度（如果校正是<br/>需要再次排放 ECO，如圖 56 所示，並且<br/>將進行生產和測試。此過程將重複，直到產品<br/>令人滿意，足以證明將使用的 CNC 加工模具的生產是合理的<br/>在批量生產中。<br/>\newpage<br/>\end{center}<br/>\begin{center}<br/>Since in this simulation it was chosen that the final mold (made of aluminum) would also<br/>be produced in house, this is the next step of development. Procedure is basically the same<br/>as before except that it is needed to create product items for both the raw material (aluminum<br/>block) and the CNC molds prior to their manufacturing. Creating BOMs and uploading<br/>relevant files</p>
<p>由於在此模擬中，選擇最終模具（由鋁製成）也將<br/>在內部生產，這是下一步的發展。程式基本相同<br/>和以前一樣，除了需要為原材料（鋁）創建產品專案<br/>塊）和製造前的 CNC 模具。創建 BOM 表和上傳<br/>相關檔。<br/>\end{center}<br/>\begin{center}<br/>Finally, the actual production on the new molds can begin. To represent that a<br/>manufacturing order of 100 Alpha Cases were created. This marks the end of the main path<br/>of development from idea to production (Figure 58).</p>
<p>最後，可以開始新模具的實際生產。表示<br/>創建了 100 個 Alpha 案例的製造訂單。這標誌著主路徑的結束<br/>從構思到生產的發展（圖58）。</p>
<p>\includegraphics[width=12cm]{22/10.png}<br/>\end{center}\\<br/>\begin{center}<br/>Figure 58 Main path of development from idea to production</p>
<p>圖58 從構思到生產的主要發展路徑<br/>\end{center}<br/>5.4.3. Process upgrade procedure</p>
<p>5.4.3. 進程升級過程<br/>\begin{center}<br/>The previous sections were about the procedure that would be necessary to use the Odoo<br/>software to track change during the main development of product. As such, most of what was<br/>described focused in the use of PLM and the standard procedure of creating and utilizing<br/>items like Products, BOMs, ECOs, MOs, WOs and Operations. This section will be different<br/>in the sense that now we have a production being carried out and the idea is to test Odoo in<br/>its capabilities of performing upgrades (Figure 59 and Figure 60). In other words,<br/>performance and feedback of information (and of course MES) becomes the main subject.</p>
<p>前面的部分是關於使用Odoo所需的程式<br/>用於跟蹤產品主要開發過程中變化的軟體。因此，大部分是<br/>重點介紹了PLM的使用以及創建和利用的標準程式<br/>產品、物料清單、ECO、MO、WO 和運營等專案。此部分將有所不同<br/>從某種意義上說，現在我們正在進行生產，我們的想法是測試Odoo。<br/>其執行升級的能力（圖 59 和圖 60）。換言之，<br/>資訊（當然還有MES）的性能和回饋成為主要主題。<br/>\newpage<br/>\end{center}\\<br/>\begin{center}</p>
<p>\includegraphics[width=12cm]{22/11.png}</p>
<p>Figure 59 Sectioned diagram regarding Process upgrade procedure</p>
<p>圖 59 進程升級過程剖面圖<br/>\end{center}<br/>\begin{center}<br/>\includegraphics[width=12cm]{22/12.png}</p>
<p>Figure 60 Sectioned diagram regarding Process development</p>
<p>圖 60 工藝開發剖面圖<br/>\end{center}<br/>\begin{center}<br/>Change is always enacted using the ECO functionality even in this case. To remind the<br/>reader the situation in which this change will be applied (Figure 61) is the product overview<br/>of the relevant product items. Every product item in that list (that is not a raw material) poses<br/>at least one BOM and two ECOs already applied to them in order to signify the initial state<br/>of every product item (Figure 62). The first ECO of every item affects the product and it<br/>holds the initial related files, the second is applied to the BOM of the product in order to hold<br/>files related to the initial state of the process as well as record the initial state of the BOM.<br/>Without these ECOs (Figure 62), when we ever applied an improvement, the initial state of<br/>the product files or BOMs would be lost.<br/> <br/>即使在這種情況下，也始終使用 ECO 功能進行更改。提醒<br/>讀者，應用此更改的情況（圖 61）是產品概述<br/>相關產品專案。該清單中的每個產品專案（不是原材料）都擺出姿勢<br/>至少一個 BOM 和兩個 ECO 已經應用於它們，以表示初始狀態<br/>每個產品專案（圖 62）。每個專案的第一個 ECO 都會影響產品及其<br/>保存初始相關檔，第二個應用於產品的BOM以保存<br/>與過程的初始狀態相關的檔，以及記錄 BOM 的初始狀態。<br/>如果沒有這些 ECO（圖 62），當我們應用改進時，初始狀態<br/>產品檔或 BOM 將丟失。<br/>\end{center}\\<br/>\begin{center}</p>
<p>\includegraphics[width=12cm]{22/13.png}</p>
<p>Figure 61 Relevant product items overview</p>
<p>圖61 相關產品項概覽<br/>\end{center}\\<br/>\begin{center}</p>
<p>\includegraphics[width=12cm]{22/14.png}</p>
<p>Figure 62 Example of ECOs of a product item</p>
<p>圖62 某產品項的ECO示例<br/>\end{center}<br/>\begin{center}<br/>This time around the production duration and the estimated duration of the process is<br/>something that need to be taken in consideration so we can perceive how that applied change<br/>on the process affect production. To this end a MO of 50 units of Alpha Case will be created<br/>with each operation being estimated to take 30 seconds (15s for parts B/C because there is<br/>the need for 2 of them). Meaning that in an ideal situation the total length would be 50<br/>minutes (25 of injection production being done in parallel and 25 for final assembly).</p>
<p>這個時間大約是生產持續時間和過程的估計持續時間<br/>需要考慮的事情，這樣我們才能感知到應用的變化<br/>對工藝影響生產。為此，將創建一個 50 個單位的 Alpha Case 的 MO<br/>每個操作估計需要 30 秒（部件 B/C 為 15 秒，因為有<br/>需要其中的 2 個）。這意味著在理想情況下，總長度為 50<br/>分鐘（25 分鐘並行進行注塑生產，25 分鐘用於最終組裝）。<br/>\end{center}<br/>\begin{center}<br/>In this simulated manufacturing run it was chosen that the injection operations would<br/>take slightly more time to complete to be representative of a suboptimal performance. This<br/>is been done to see how Odoo reacts and informs in real time the situation in hand.</p>
<p>在這個類比製造運行中，選擇注射操作將<br/>需要稍多一點的時間才能完成，以代表次優性能。這<br/>這樣做是為了查看Odoo如何反應並即時通知手頭的情況。<br/>\newpage<br/>\end{center}<br/>\begin{center}<br/>The first phase of the production in the injection process that is carried out in parallel for<br/>parts A and B/C on the injection stations 1 and 2. The following (Figure 64) shows how in<br/>the beginning of the process the overview of the productions stations indicate with green<br/>circles. These circulars signaling in known as Andon and although it is not always considered<br/>part of MES it is commonly an integrated feature in many MES systems. After the production<br/>process have been carried out with a little delay the circle turned gray and overall efficiency<br/>has been marked red on the station tabs (Figure 64).</p>
<p>在注射過程中的第一階段生產，並行進行<br/>注射站 1 和 2 上的 A 和 B/C 部分。下面（圖 64）顯示了如何在<br/>流程開始時，生產站的概覽以綠色表示<br/>圈。這些通告在被稱為 Andon 中，儘管它並不總是被考慮<br/>作為MES的一部分，它通常是許多MES系統中的集成功能。生產後<br/>過程進行得稍有延遲，圓圈變灰，整體效率高<br/>在工作站標籤上標記為紅色（圖 64）。<br/>\end{center}\\<br/>\begin{center}</p>
<p>\includegraphics[width=12cm]{22/15.png}</p>
<p>Figure 63 Workcenter overview 1</p>
<p>圖63 工作中心概覽1<br/>\end{center}\\<br/>\begin{center}</p>
<p>\includegraphics[width=12cm]{22/16.png}</p>
<p>Figure 64 Workcenter overview 2</p>
<p>圖64 Workcenter概覽2<br/>\end{center}<br/>\begin{center}<br/>The production was carried out twice before any improvement was applied. The first<br/>improvement to be carried out were on the production process on the operation and the raw<br/>materials used. More specifically, a new operation representative of an equipment upgrades<br/>on the injection machines and the replacement of the brand of plastic pellets use in the<br/>injection process (Figure 65).</p>
<p>在進行任何改進之前，生產進行了兩次。第一個<br/>要進行的改進是對生產過程、操作和原始<br/>使用的材料。更具體地說，是代表設備升級的新操作<br/>在注塑機和塑膠顆粒的替代品牌上使用<br/>注射過程（圖65）。<br/>\newpage<br/>\end{center}\\<br/>\begin{center}</p>
<p>\includegraphics[width=12cm]{22/17.png}</p>
<p>Figure 65 ECO applied to BOM</p>
<p>圖 65 應用於 BOM 的 ECO<br/>\end{center}<br/>\begin{center}<br/>These upgrades were applied to the BOMs of parts A and B of the Alpha case and<br/>production recommenced. After two other MOs producing 50 products each simulating an<br/>improvement to the process the following types of data were automatically made available<br/>by Odoo (Table 3):</p>
<p>這些升級應用於 Alpha 外殼的 A 和 B 部件的 BOM，並且<br/>重新開始生產。在另外兩個 MO 生產 50 個產品後，每個 MO 類比<br/>改進流程 自動提供以下類型的資料<br/>通過Odoo（表3）：<br/>\end{center}\\<br/>\begin{center}<br/>Table 3 Types of data output</p>
<p>表3 資料輸出類型<br/>\end{center}</p>
<p>\includegraphics[width=12cm]{22/18.png}</p>
<p><br/>\begin{center}<br/>It should be commented that the data regarding MOs is unfortunately captured in a<br/>monthly basis as opposed to the other two categories that process data per order executed.<br/>This means that since this simulation is using a trial version of the software that lasts only 14<br/>days the graphical representation of that data offers an unimpressive view of a single point<br/>or a single column. In the long run this is a great way to display performance over time but<br/>in the case of this simulation not so much (Figure 66).</p>
<p>應該評論的是，不幸的是，有關 MO 的資料被捕獲在<br/>按月計算，而不是其他兩個類別，即處理每個執行的訂單的資料。<br/>這意味著，由於此模擬使用的是僅持續 14 的軟體試用版<br/>天 該資料的圖形表示提供了單個點的不起眼的視圖<br/>或單列。從長遠來看，這是顯示性能隨時間推移的好方法，但<br/>在這種類比的情況下，沒有那麼多（圖 66）<br/>\end{center}<br/>\end{document}</p>
<p>&gt;&gt;&gt;&gt;&gt;&gt;&gt; refs/remotes/origin/main</p>
<h1>零件模擬</h1>
<p><a href="https://drive.google.com/file/d/1Zx8PwQygCF-Uv7o2DBM-ScKH_dPrtD4U/view?usp=drive_link">https://drive.google.com/file/d/1Zx8PwQygCF-Uv7o2DBM-ScKH_dPrtD4U/view?usp=drive_link</a></p>
<p></p>
<h1>足球門及籃框</h1>
<p><img alt="" height="302" src="/images/螢幕擷取畫面 2024-05-30 150714.png" width="550"/></p>
<p><a href="https://drive.google.com/file/d/1BqthgjumQfO5BwFpxkfeWsS559mqBP5D/view?usp=drive_link">https://drive.google.com/file/d/1BqthgjumQfO5BwFpxkfeWsS559mqBP5D/view?usp=drive_link</a></p>
<h1>w17</h1>
<p>項目一</p>
<p>youtube</p>
<p><a href="https://studio.youtube.com/video/AekmvQU2qGU/edit">https://studio.youtube.com/video/AekmvQU2qGU/edit</a></p>
<p>錄影</p>
<p><a href="https://drive.google.com/file/d/1UfzLoF6kPxLIOjScCCy8VOW0gM5uOSbO/view?usp=drive_link">https://drive.google.com/file/d/1UfzLoF6kPxLIOjScCCy8VOW0gM5uOSbO/view?usp=drive_link</a></p>
<p><a href="https://drive.google.com/file/d/157Bs6N8wd7DUBSdu-99iRMuYhtfltajD/view?usp=drive_link">https://drive.google.com/file/d/157Bs6N8wd7DUBSdu-99iRMuYhtfltajD/view?usp=drive_link</a></p>
<p><a href="https://drive.google.com/file/d/1jNgwXGT_3QXqZ0MrSkwtOUWTuAaq5jTE/view?usp=drive_link">https://drive.google.com/file/d/1jNgwXGT_3QXqZ0MrSkwtOUWTuAaq5jTE/view?usp=</a></p>
<p><a href="https://drive.google.com/file/d/1vHBr-fyeMNYqWDzN949UYhHjRlI5kdIM/view?usp=drive_link">https://drive.google.com/file/d/1vHBr-fyeMNYqWDzN949UYhHjRlI5kdIM/view?usp=drive_link</a></p>
<p>圖檔</p>
<p><a href="https://drive.google.com/file/d/1OEmTIbdsiwE5o1qWvAgMf6EIMcm5zWLX/view?usp=drive_link">https://drive.google.com/file/d/1OEmTIbdsiwE5o1qWvAgMf6EIMcm5zWLX/view?usp=drive_link</a></p>
<p><a href="https://drive.google.com/file/d/1St_dI_VeRElJQDUDD-AYPSZdi4UkAcVs/view?usp=drive_link">https://drive.google.com/file/d/1St_dI_VeRElJQDUDD-AYPSZdi4UkAcVs/view?usp=drive_link</a></p>
<p><a href="https://drive.google.com/file/d/1CcNIIfPHv1S4do3ti8_HEjUZkeYp9mmi/view?usp=drive_link">https://drive.google.com/file/d/1CcNIIfPHv1S4do3ti8_HEjUZkeYp9mmi/view?usp=drive_link</a></p>
<p><a href="https://drive.google.com/file/d/1TZE7pibhjjHM6hWZG-tqVCSbf47bBGcZ/view?usp=drive_link">https://drive.google.com/file/d/1TZE7pibhjjHM6hWZG-tqVCSbf47bBGcZ/view?usp=drive_link</a></p>
<p>項目二</p>
<p>youtube</p>
<p><a href="https://studio.youtube.com/video/3pjE58-ByTM/edit">https://studio.youtube.com/video/3pjE58-ByTM/edit</a></p>
<p>組合圖</p>
<p><a href="https://drive.google.com/file/d/1JP-HId1p7kfd5H10fvCM-3Siroi4bapz/view?usp=drive_link">https://drive.google.com/file/d/1JP-HId1p7kfd5H10fvCM-3Siroi4bapz/view?usp=drive_link</a></p>
<p></p>
<p></p>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>